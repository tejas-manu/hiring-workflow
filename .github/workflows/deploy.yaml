name: Deploy Resume Processor to AWS

on:
  push:
    branches:
      - automation

permissions:
  id-token: write # Required for configuring AWS credentials
  contents: read

jobs:
  provision_infra:
    name: Provision Infrastructure with Terraform
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[destroy]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Or your desired region

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        id: init
        run: terraform -chdir=./infra init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=./infra validate -no-color

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=./infra apply -auto-approve -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}"
    
      - name: Get Terraform Outputs
        id: get_outputs
        run: |
          cd ./infra
          echo "PROCESSOR_LAMBDA_NAME=$(terraform output -raw processor_lambda_name)" >> $GITHUB_OUTPUT
          echo "API_LAMBDA_NAME=$(terraform output -raw api_lambda_name)" >> $GITHUB_OUTPUT
          echo "SNS_TOPIC_ARN=$(terraform output -raw sns_topic_arn)" >> $GITHUB_OUTPUT
          echo "FRONTEND_BUCKET_NAME=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "API_GATEWAY_ENDPOINT=$(terraform output -raw api_gateway_endpoint)" >> $GITHUB_OUTPUT
        
    outputs:
      PROCESSOR_LAMBDA_NAME: ${{ steps.get_outputs.outputs.PROCESSOR_LAMBDA_NAME }}
      API_LAMBDA_NAME: ${{ steps.get_outputs.outputs.API_LAMBDA_NAME }}
      SNS_TOPIC_ARN: ${{ steps.get_outputs.outputs.SNS_TOPIC_ARN }}
      FRONTEND_BUCKET_NAME: ${{ steps.get_outputs.outputs.FRONTEND_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ steps.get_outputs.outputs.CLOUDFRONT_DISTRIBUTION_ID }}
      API_GATEWAY_ENDPOINT: ${{ steps.get_outputs.outputs.API_GATEWAY_ENDPOINT }}

      # LAMBDA_FUNCTION_NAME: ${{ steps.get_outputs.outputs.lambda_function_name }}
      # SNS_TOPIC_ARN: ${{ steps.get_outputs.outputs.sns_topic_arn }}


  build_and_deploy_lambda:
    name: Build and Deploy Lambda Code
    runs-on: ubuntu-latest
    needs: provision_infra # This job runs only after the infra is provisioned

    defaults:
      run:
        working-directory: ./Backend

    if: "!contains(github.event.head_commit.message, '[destroy]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Or your desired region

      - name: Build Lambda package using Docker
        run: |
          docker build --platform linux/amd64 -t lambda-packaging .
          docker create --name lambda-temp lambda-packaging
          docker cp lambda-temp:/var/task/. ./deployment
          docker rm -f lambda-temp
          cd deployment
          zip -r ../deployment_package.zip .

      - name: Update Lambda Function Code
        run: >
          aws lambda update-function-code
          --function-name ${{ needs.provision_infra.outputs.PROCESSOR_LAMBDA_NAME }}
          --zip-file fileb://deployment_package.zip

      - name: Wait for Lambda Function Update to Complete
        run: >
          aws lambda wait function-updated
          --function-name ${{ needs.provision_infra.outputs.PROCESSOR_LAMBDA_NAME }}
      
      - name: Update Lambda Environment Variables
        run: >
          aws lambda update-function-configuration
          --function-name ${{ needs.provision_infra.outputs.PROCESSOR_LAMBDA_NAME }}
          --environment "Variables={GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},SNS_TOPIC_ARN=${{ needs.provision_infra.outputs.SNS_TOPIC_ARN }}}"

  build_and_deploy_api_lambda:
    name: Build & Deploy API Lambda (Node.js)
    runs-on: ubuntu-latest
    needs: provision_infra

    defaults:
      run:
        working-directory: ./Frontend/app-server

    if: "!contains(github.event.head_commit.message, '[destroy]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build Lambda package
        run: |
          npm install --production
          zip -r ${{ github.workspace }}/api_package.zip .
      - name: Update Lambda Function Code
        run: >
          aws lambda update-function-code
          --function-name ${{ needs.provision_infra.outputs.API_LAMBDA_NAME }}
          --zip-file fileb://${{ github.workspace }}/api_package.zip

  build_and_deploy_frontend:
    name: Build & Deploy Frontend (React)
    runs-on: ubuntu-latest
    needs: provision_infra

    defaults:
      run:
        working-directory: ./Frontend/resume-processor

    if: "!contains(github.event.head_commit.message, '[destroy]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build React App
        run: |
          npm install
          npm run build
        env:
          REACT_APP_BACKEND_URL: ${{ needs.provision_infra.outputs.API_GATEWAY_ENDPOINT }}
      - name: Deploy to S3
        run: >
          aws s3 sync ./build s3://${{ needs.provision_infra.outputs.FRONTEND_BUCKET_NAME }} --delete
      - name: Invalidate CloudFront Cache
        run: >
          aws cloudfront create-invalidation
          --distribution-id ${{ needs.provision_infra.outputs.CLOUDFRONT_DISTRIBUTION_ID }}
          --paths "/*"



  destroy_infra:
    name: Destroy Infrastructure with Terraform
    runs-on: ubuntu-latest

    if: "contains(github.event.head_commit.message, '[destroy]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Or your desired region

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=./infra init

      - name: Terraform Destroy
        run: terraform -chdir=./infra destroy -auto-approve -var="notification_email=${{ secrets.NOTIFICATION_EMAIL }}"
